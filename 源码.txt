// 202231021419-7.c.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ID_LENGTH 11
#define MAX_NAME_LENGTH 50
#define MAX_COURSES 6
// 定义学生结构体
struct Student {
    char id[MAX_ID_LENGTH];
    char name[MAX_NAME_LENGTH];
    int scores[MAX_COURSES];
    int totalScore;
    float averageScore;
};

void inputRecord(struct Student *students, int numStudents, int numCourses) {
    int i, j;

    printf("Input record:\n");
    for (i = 0; i < numStudents; i++) {
        printf("Enter student %d's information:\n", i + 1);

        printf("  Enter student ID (max %d characters): ", MAX_ID_LENGTH - 1);
        scanf("%s", students[i].id);

        printf("  Enter student name (max %d characters): ", MAX_NAME_LENGTH - 1);
        scanf("%s", students[i].name);

        for (j = 0; j < numCourses; j++) {
            printf("  Enter score for course %d: ", j + 1);
            scanf("%d", &students[i].scores[j]);
        }
    }
}

void calculateTotalAverageCourse(struct Student *students, int numStudents, int numCourses) {
    int i, j;
    int sum, count;

    printf("Calculate total and average score of every course:\n");
    for (j = 0; j < numCourses; j++) {
        sum = 0;
        count = 0;

        for (i = 0; i < numStudents; i++) {
            sum += students[i].scores[j];
            count++;
        }

        printf("Course %d:\n", j + 1);
        printf("  Total score: %d\n", sum);
        printf("  Average score: %.2f\n", (float) sum / count);
    }
}

void calculateTotalAverageStudent(struct Student *students, int numStudents, int numCourses) {
    int i, j;
    int sum;

    printf("Calculate total and average score of every student:\n");
    for (i = 0; i < numStudents; i++) {
        sum = 0;

        for (j = 0; j < numCourses; j++) {
            sum += students[i].scores[j];
        }

        students[i].totalScore = sum;
        students[i].averageScore = (float) sum / numCourses;

        printf("Student %d:\n", i + 1);
        printf("  Total score: %d\n", students[i].totalScore);
        printf("  Average score: %.2f\n", students[i].averageScore);
    }
}

void sortDescendingTotalScore(struct Student *students, int numStudents) {
    int i, j;
    struct Student temp;

    printf("Sort in descending order by total score of every student:\n");
    for (i = 0; i < numStudents - 1; i++) {
        for (j = 0; j < numStudents - i - 1; j++) {
            if (students[j].totalScore < students[j + 1].totalScore) {
                temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }

    printf("Ranking:\n");
    for (i = 0; i < numStudents; i++) {
        printf("Rank %d - Student ID: %s, Total Score: %d\n", i + 1, students[i].id, students[i].totalScore);
    }
}

void sortAscendingNumber(struct Student *students, int numStudents) {
    int i, j;
    struct Student temp;

    printf("Sort in ascending order by number:\n");
    for (i = 0; i < numStudents - 1; i++) {
        for (j = 0; j < numStudents - i - 1; j++) {
            if (strcmp(students[j].id, students[j + 1].id) > 0) {
                temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }

    printf("Score Table (sorted by number):\n");
    for (i = 0; i < numStudents; i++) {
        printf("Student ID: %s, Total Score: %d\n", students[i].id, students[i].totalScore);
    }
}

void sortDictionaryName(struct Student *students, int numStudents) {
    int i, j;
    struct Student temp;

    printf("Sort in dictionary order by name:\n");
    for (i = 0; i < numStudents - 1; i++) {
        for (j = 0; j < numStudents - i - 1; j++) {
            if (strcmp(students[j].name, students[j + 1].name) > 0) {
                temp = students[j];
                students[j] = students[j + 1];
                students[j + 1] = temp;
            }
        }
    }

    printf("Score Table (sorted by name):\n");
    for (i = 0; i < numStudents; i++) {
        printf("Student Name: %s, Total Score: %d\n", students[i].name, students[i].totalScore);
    }
}

void searchByNumber(struct Student *students, int numStudents) {
    int i;
    char searchId[MAX_ID_LENGTH];

    printf("Search by number:\n");
    printf("Enter the student ID to search: ");
    scanf("%s", searchId);

    for (i = 0; i < numStudents; i++) {
        if (strcmp(students[i].id, searchId) == 0) {
            printf("Student ID: %s\n", students[i].id);
            printf("Total Score: %d\n", students[i].totalScore);
            break;
        }
    }

    if (i == numStudents) {
        printf("Student not found.\n");
    }
}

void searchByName(struct Student *students, int numStudents) {
    int i;
    char searchName[MAX_NAME_LENGTH];

    printf("Search by name:\n");
    printf("Enter the student name to search: ");
    scanf("%s", searchName);

    for (i = 0; i < numStudents; i++) {
        if (strcmp(students[i].name, searchName) == 0) {
            printf("Student Name: %s\n", students[i].name);
            printf("Total Score: %d\n", students[i].totalScore);
            break;
        }
    }

    if (i == numStudents) {
        printf("Student not found.\n");
    }
}

void statisticAnalysis(struct Student *students, int numStudents, int numCourses) {
    int i, j;
    int excellentCount, goodCount, averageCount, passCount, failCount;
    float excellentPercentage, goodPercentage, averagePercentage, passPercentage, failPercentage;

    printf("Statistic analysis for every course:\n");
    for (j = 0; j < numCourses; j++) {
        excellentCount = 0;
        goodCount = 0;
        averageCount = 0;
        passCount = 0;
        failCount = 0;

        for (i = 0; i < numStudents; i++) {
            if (students[i].scores[j] >= 90 && students[i].scores[j] <= 100) {
                excellentCount++;
            } else if (students[i].scores[j] >= 80 && students[i].scores[j] < 90) {
                goodCount++;
            } else if (students[i].scores[j] >= 70 && students[i].scores[j] < 80) {
                averageCount++;
            } else if (students[i].scores[j] >= 60 && students[i].scores[j] < 70) {
                passCount++;
            } else {
                failCount++;
            }
        }

        excellentPercentage = (float) excellentCount / numStudents * 100;
        goodPercentage = (float) goodCount / numStudents * 100;
        averagePercentage = (float) averageCount / numStudents * 100;
        passPercentage = (float) passCount / numStudents * 100;
        failPercentage = (float) failCount / numStudents * 100;

        printf("Course %d:\n", j + 1);
        printf("  Excellent: %d (%.2f%%)\n", excellentCount, excellentPercentage);
        printf("  Good: %d (%.2f%%)\n", goodCount, goodPercentage);
        printf("  Average: %d (%.2f%%)\n", averageCount, averagePercentage);
        printf("  Pass: %d (%.2f%%)\n", passCount, passPercentage);
        printf("  Fail: %d (%.2f%%)\n", failCount, failPercentage);
    }
}

void listRecord(struct Student *students, int numStudents, int numCourses) {
    int i, j;

    printf("List record:\n");
    for (i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("  Student ID: %s\n", students[i].id);
        printf("  Student Name: %s\n", students[i].name);

        for (j = 0; j < numCourses; j++) {
            printf("  Score for Course %d: %d\n", j + 1, students[i].scores[j]);
        }

        printf("  Total Score: %d\n", students[i].totalScore);
        printf("  Average Score: %.2f\n", students[i].averageScore);
    }
}

int main() {
    int numStudents, numCourses;
    struct Student *students;

    printf("Enter the number of students (1-30): ");
    scanf("%d", &numStudents);
    if (numStudents < 1 || numStudents > 30) {
        printf("Invalid number of students. Please enter a number between 1 and 30.\n");
        return 0;
    }

    printf("Enter the number of courses (1-6): ");
    scanf("%d", &numCourses);
    if (numCourses < 1 || numCourses > 6) {
        printf("Invalid number of courses. Please enter a number between 1 and 6.\n");
        return 0;
    }

    students = (struct Student *) malloc(numStudents * sizeof(struct Student));
    if (students == NULL) {
        printf("Memory allocation failed. Exiting the program.\n");
        return 0;
    }

    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Input record\n");
        printf("2. Calculate total and average score of every course\n");
        printf("3. Calculate total and average score of every student\n");
        printf("4. Sort in descending order by total score of every student\n");
        printf("5. Sort in ascending order by number\n");
        printf("6. Sort in dictionary order by name\n");
        printf("7. Search by number\n");
        printf("8. Search by name\n");
        printf("9. Statistic analysis for every course\n");
        printf("10. List record\n");
        printf("0. Exit\n");
        printf("Please input your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                inputRecord(students, numStudents, numCourses);
                break;
            case 2:
                calculateTotalAverageCourse(students, numStudents, numCourses);
                break;
            case 3:
                calculateTotalAverageStudent(students, numStudents, numCourses);
                break;
            case 4:
                sortDescendingTotalScore(students, numStudents);
                break;
            case 5:
                sortAscendingNumber(students, numStudents);
                break;
            case 6:
                sortDictionaryName(students, numStudents);
                break;
            case 7:
                searchByNumber(students, numStudents);
                break;
            case 8:
                searchByName(students, numStudents);
                break;
            case 9:
                statisticAnalysis(students, numStudents, numCourses);
                break;
            case 10:
                listRecord(students, numStudents, numCourses);
                break;
            case 0:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a number between 0 and 10.\n");
        }
    } while (choice != 0);

    free(students);

    return 0;
}

